{"version":3,"file":"static/js/340.549702d0.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Phonebook.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/phonebook/contactSlicer';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    if (isContact) {\n      alert(`${form.name.value} is already in contacts!`);\n    }\n    if (!isContact) {\n      dispatch(\n        addContact({\n          name: form.name.value,\n          number: form.number.value,\n        })\n      );\n      console.log(form.number.value);\n    }\n    form.reset();\n  };\n\n  const numberId = nanoid();\n  const nameId = nanoid();\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label className={css.label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label className={css.label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"tel\"\n        />\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"element\":\"ContactList_element__v3kbj\",\"listItem\":\"ContactList_listItem__SptUx\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/phonebook/contactSlicer';\nimport { selectFilter, selectContacts } from 'redux/selectors';\n\nconst ContactsList = ({ storage }) => {\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterStatus = filterValue.status;\n  const filterContact = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterStatus)\n  );\n\n  const handledDelete = id => {\n    dispatch(deleteContact(id));\n    localStorage.setItem(storage, JSON.stringify(contacts));\n  };\n\n  const listItems =\n    filterContact === []\n      ? ''\n      : filterContact.map(item => {\n          return (\n            <li key={item.id} id={item.id} className={css.element}>\n              {item.name}: {item.number}\n              <button\n                onClick={() => handledDelete(item.id)}\n                className={css.btnDelete}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        });\n\n  return <ul className={css.listItem}>{listItems}</ul>;\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { setFilter } from '../../redux/phonebook/filterSlicer';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const changeFilter = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n  return (\n    <div className={css.filter}>\n      <label htmlFor=\"filter\">\n        Filter contacts by name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          onChange={changeFilter}\n          id={filterId}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectIsLoading, selectError } from 'redux/selectors';\nimport { fetchContacts } from 'redux/phonebook/contactSlicer';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n      {!!isLoading && !error && <b>Loading...</b>}\n    </>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","dispatch","useDispatch","contacts","useSelector","selectContacts","numberId","nameId","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","alert","addContact","number","console","log","reset","className","css","htmlFor","type","placeholder","pattern","title","required","autoComplete","storage","filterValue","selectFilter","filterStatus","status","filterContact","filter","contact","includes","listItems","map","item","onClick","deleteContact","localStorage","setItem","JSON","stringify","filterId","onChange","e","setFilter","Phonebook","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","ContactList"],"sourceRoot":""}