{"version":3,"file":"static/js/77.928fdee9.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/phonebook/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Phonebook.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/phonebook/selectors';\nimport { addContact } from 'redux/phonebook/contactSlicer';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    isContact\n      ? alert(`${form.name.value} is already in contacts!`)\n      : dispatch(\n          addContact({\n            id: nanoid(),\n            name: form.name.value,\n            phone: form.phone.value,\n          })\n        );\n\n    form.reset();\n  };\n\n  const numberId = nanoid();\n  const nameId = nanoid();\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <label className={css.label} htmlFor={nameId}>\n          Name\n        </label>\n        <input\n          className={css.input}\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label className={css.label} htmlFor={numberId}>\n          Number\n        </label>\n        <input\n          className={css.input}\n          id={numberId}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"tel\"\n        />\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"element\":\"ContactList_element__v3kbj\",\"listItem\":\"ContactList_listItem__SptUx\",\"btnDelete\":\"ContactList_btnDelete__Eeo9v\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/phonebook/contactSlicer';\nimport { selectFilter, selectContacts } from 'redux/phonebook/selectors';\n\nconst ContactsList = ({ storage }) => {\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filterStatus = filterValue.status;\n  const filterContact = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterStatus)\n  );\n\n  const handledDelete = id => {\n    dispatch(deleteContact(id));\n    localStorage.setItem(storage, JSON.stringify(contacts));\n  };\n\n  const listItems =\n    filterContact === []\n      ? ''\n      : filterContact.map(item => {\n          return (\n            <li key={item.id} id={item.id} className={css.element}>\n              {item.name}: {item.phone}\n              <button\n                onClick={() => handledDelete(item.id)}\n                className={css.btnDelete}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        });\n\n  return <ul className={css.listItem}>{listItems}</ul>;\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { setFilter } from '../../redux/phonebook/filterSlicer';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const changeFilter = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n  return (\n    <div className={css.filter}>\n      <label htmlFor=\"filter\">\n        Filter contacts by name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          onChange={changeFilter}\n          id={filterId}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectIsLoading, selectError } from 'redux/phonebook/selectors';\nimport { fetchContacts } from 'redux/phonebook/contactSlicer';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList></ContactList>\n      {!!isLoading && !error && <b>Loading...</b>}\n    </div>\n  );\n};\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectFilter","state","filter","selectContacts","contacts","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","numberId","nameId","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","alert","addContact","phone","reset","className","css","htmlFor","type","pattern","title","required","autoComplete","storage","filterValue","filterStatus","status","filterContact","contact","includes","listItems","map","item","onClick","deleteContact","localStorage","setItem","JSON","stringify","filterId","onChange","e","setFilter","App","useEffect","fetchContacts","ContactList"],"sourceRoot":""}